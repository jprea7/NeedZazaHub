getgenv().SecureMode = true
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
if game.PlaceId == 155615604 then  
   local Window = Rayfield:CreateWindow({
      Name = "Prison Life ┃ Zaza Hub",
      LoadingTitle = "Zaza Hub",
      LoadingSubtitle = "by nexcto",
      ConfigurationSaving = {
         Enabled = true,
         FolderName = nil, -- Create a custom folder for your hub/game
         FileName = "ZazaHub"
      },
      Discord = {
         Enabled = false,
         Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
         RememberJoins = true -- Set this to false to make them join the discord every time they load it up
      },
      KeySystem = true, -- Set this to true to use our key system
      KeySettings = {
         Title = "key",
         Subtitle = "key is hello",
         Note = "No method of obtaining the key is provided",
         FileName = "zakey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
         SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
         GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
         Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
      }
   })


   local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image
   local Section = PlayerTab:CreateSection("Movement")

   Rayfield:Notify({
      Title = "Script Executed!",
      Content = "None",
      Duration = 5,
      Image = 4483362458,
      Actions = { -- Notification Buttons
         Ignore = {
            Name = "Okay!",
            Callback = function()
            print("The user tapped Okay!")
         end
      },
   },
   })


   local Slider = PlayerTab:CreateSlider({
      Name = "Walkspeed",
      Range = {5, 500},
      Increment = 1,
      Suffix = "WS",
      CurrentValue = 16,
      Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
      Callback = function(Value)
         game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
      end,
   })

   local Slider = PlayerTab:CreateSlider({
      Name = "Jump Power",
      Range = {16, 500},
      Increment = 1,
      Suffix = "Power",
      CurrentValue = 16,
      Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
      Callback = function(Value)
         game.Players.LocalPlayer.Character.Humanoid.JumpPower = Value
      end,
   })


   local Section = PlayerTab:CreateSection("Misc")

   local Toggle = PlayerTab:CreateToggle({
      Name = "Noclip",
      CurrentValue = false,
      Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
      Callback = function(Value)
         local Noclip = nil
         local Clip = nil
         
         function noclip()
             Clip = false
             local function Nocl()
                 if Clip == false and game.Players.LocalPlayer.Character ~= nil then
                     for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                         if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
                             v.CanCollide = false
                         end
                     end
                 end
                 wait(0.21) -- basic optimization
             end
             Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
         end
         
         function clip()
             if Noclip then Noclip:Disconnect() end
             Clip = true
         end
         
         noclip() -- to toggle noclip() and clip()
      end,
   })

   -- MAIN
   local MainTab = Window:CreateTab("Main", 4483362458) -- Title, Image
   local Section = MainTab:CreateSection("Main")



   local Button = MainTab:CreateButton({
      Name = "Infinite Yield",
      Callback = function()
         loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))() 
      end,
   })

   local Button = MainTab:CreateButton({
      Name = "ESP",
      Callback = function()
         
      end,
   })
   -- OTHER
   local OtherTab = Window:CreateTab("💿Other", 4483362458) -- Title, Image

   local Section = OtherTab:CreateSection("Other")


   local Button = OtherTab:CreateButton({
      Name = "Destroy Doors",
      Callback = function()
         game.Workspace.Doors:Destroy()
      end,
   })
elseif game.PlaceId == 7047488135 then
   
   
   local Window = Rayfield:CreateWindow({
      Name = "Speed Run Simulator ┃ Zaza Hub",
      LoadingTitle = "Zaza Hub",
      LoadingSubtitle = "by nexcto",
      ConfigurationSaving = {
         Enabled = true,
         FolderName = nil, -- Create a custom folder for your hub/game
         FileName = "ZazaHub"
      },
      Discord = {
         Enabled = false,
         Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
         RememberJoins = true -- Set this to false to make them join the discord every time they load it up
      },
      KeySystem = true, -- Set this to true to use our key system
      KeySettings = {
         Title = "Untitled",
         Subtitle = "Key is Hello",
         Note = "No method of obtaining the key is provided",
         FileName = "zakey", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
         SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
         GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
         Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
      }
   })

   local MainTab = Window:CreateTab("Main") -- Title, Image
   local Section = MainTab:CreateSection("Automatics")

   Rayfield:Notify({
      Title = "Script Executed!",
      Content = "Last Updated 6/25/23",
      Duration = 5,
      Image = 4483362458,
      Actions = { -- Notification Buttons
         Ignore = {
            Name = "Okay!",
            Callback = function()
            print("The user tapped Okay!")
         end
      },
   },
   })


   local Button = MainTab:CreateButton({
      Name = "Auto Speed",
      Callback = function()
         _G.autoTap = true
         while _G.autoTap == true do
             game:GetService("ReplicatedStorage").Remotes.AddSpeed:FireServer()
             wait()
         end
      end,
   })


   local Button = MainTab:CreateButton({
      Name = "Auto Collect All Orbs",
      Callback = function()
         while wait()do
            for i,v in pairs(game:GetService("Workspace").OrbSpawns.Orb:GetChildren())do
            firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart, v, 0)
            end
            end
      end,
   })

   local Button = MainTab:CreateButton({
      Name = "Auto Rebirth",
      Callback = function()
         _G.autoRebirth = true 
         while _G.autoRebirth == true do
             game:GetService("ReplicatedStorage").Remotes.Rebirth:FireServer()
             wait()
         end
         
      end,
   })
   
   local EggsTab = Window:CreateTab("Pets") -- Title, Image
   local Section = EggsTab:CreateSection("Eggs")

   local Button = EggsTab:CreateButton({
      Name = "Open Egg One",
      Callback = function()
      local args = {
         [1] = "EggOne"
      }

      game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))

      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Egg Two",
      Callback = function()
         local args = {
            [1] = "EggTwo"
         }
   
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
   
      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Egg Three",
      Callback = function()
         local args = {
            [1] = "EggThree"
         }
   
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Egg Four",
      Callback = function()
         local args = {
            [1] = "EggFour"
         }
   
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Egg Five",
      Callback = function()
         local args = {
            [1] = "EggFive"
         }
        
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })
   
   local Button = EggsTab:CreateButton({
      Name = "Open Egg Six",
      Callback = function()
         local args = {
            [1] = "EggSix"
         }
        
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Egg Seven",
      Callback = function()
         local args = {
            [1] = "EggSeven"
         }
        
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Egg Eight",
      Callback = function()
         local args = {
            [1] = "EggEight"
         }
        
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Egg Nine",
      Callback = function()
         local args = {
            [1] = "EggNine"
         }
        
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Egg Ten",
      Callback = function()
         local args = {
            [1] = "EggTen"
         }
        
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Egg Eleven",
      Callback = function()
         local args = {
            [1] = "EggEleven"
         }
        
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Egg Twelve",
      Callback = function()
         local args = {
            [1] = "EggTwelve"
         }
        
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Egg Thirteen",
      Callback = function()
         local args = {
            [1] = "EggThirteen"
         }
        
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })

   local Button = EggsTab:CreateButton({
      Name = "Open Robux Egg",
      Callback = function()
         local args = {
            [1] = "ReverseFlashEgg"
         }
        
         game:GetService("ReplicatedStorage").Remotes.CanBuyEgg:InvokeServer(unpack(args))
      end,
   })
   
   
   
   
   
   
   local TeleportsTab = Window:CreateTab("Teleports") -- Title, Image
   local Section = TeleportsTab:CreateSection("Races")

   local Button = TeleportsTab:CreateButton({
      Name = "Race Start",
      Callback = function()
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-693.902161, 209.172363, -171.243942, 1, 0, 0, 0, 1, 0, 0, 0, 1)
      end,
   })

   local Button = TeleportsTab:CreateButton({
      Name = "Race End",
      Callback = function()
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-696.202148, 240.87236, 1280.2561, 1, 0, 0, 0, 1, 0, 0, 0, 1)
      end,
   })
elseif game.PlaceId == 3823781113 then

   local Window = Rayfield:CreateWindow({
      Name = "[💎2X] Hoop Simulator! 🏀 ┃ Zaza Hub",
      LoadingTitle = "Zaza Hub",
      LoadingSubtitle = "by nexcto",
      ConfigurationSaving = {
         Enabled = true,
         FolderName = nil, -- Create a custom folder for your hub/game
         FileName = "Zaza Hub"
      },
      Discord = {
         Enabled = false,
         Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
         RememberJoins = true -- Set this to false to make them join the discord every time they load it up
      },
      KeySystem = false, -- Set this to true to use our key system
      KeySettings = {
         Title = "Key",
         Subtitle = "Key System",
         Note = "Key is Hello",
         FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
         SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
         GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
         Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
      }
   })
   
   Rayfield:Notify({
      Title = "Script Executed!",
      Content = "Last Updated 6/27/23",
      Duration = 2.5,
      Image = 4483362458,
      Actions = { -- Notification Buttons
         Ignore = {
            Name = "Okay!",
            Callback = function()
            print("enjoy :D")
         end
      },
   },
   })
   
   local FarmingTab = Window:CreateTab("Farming") -- Title, Image
   local Section = FarmingTab:CreateSection("Farm")
   
   
   
   local Toggle = FarmingTab:CreateToggle({
      Name = "Auto-Shoot",
      CurrentValue = false,
      Flag = "Autoshoot", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
      Callback = function(State)
         _G.autoShoot = State

         while _G.autoShoot do
            local args = {
               [1] = 1
           }
           
           game:GetService("ReplicatedStorage"):FindFirstChild("events-O67"):FindFirstChild("a29a579c-066f-4787-a2f5-b66e701e925e"):FireServer(unpack(args))
            task.wait(3)
         end
      end,
   })

   local Button = FarmingTab:CreateButton({
      Name = "Sell",
      Callback = function()
         local player = game.Players.LocalPlayer.Character.HumanoidRootPart
         local sellTp = player.CFrame
         player.CFrame = CFrame.new(533.13562, 183.837799, 150.549026)
         wait(0.3)
         player.CFrame = sellTp
      end,
   })
end














local ItemsTab = Window:CreateTab("Items") 
local Section = ItemsTab:CreateSection("Buy All")

local Button = ItemsTab:CreateButton({
   Name = "Buy All Swords",
   Callback = function()
      local args = {
         [1] = "Swords"
     }
     
     game:GetService("ReplicatedStorage").Events.BuyAll:FireServer(unpack(args))
     
   end,
})
